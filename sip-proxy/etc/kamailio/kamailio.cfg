#!KAMAILIO
#
include_file "chilli.cfg"

#!define WITH_DEBUG
#!define WITH_MYSQL
#!define WITH_USRLOCDB

#!ifdef WITH_SIP_PROXY
#!define WITH_NAT
#!define WITH_PATH
#!define WITH_ANTIFLOOD //对IP限制频次
#!define WITH_MULTIDOMAIN
#!define WITH_DISPATCH //dispatch
#!define WITH_IPAUTH
#!endif

#!ifdef WITH_SIP_GW
#!define WITH_NAT
#!define WITH_PATH
#!define WITH_IPAUTH
#!define WITH_ANTIFLOOD //对IP限制频次
#!define WITH_MULTIDOMAIN
#!define WITH_DISPATCH //dispatch
#!endif

#!ifdef WITH_SIP_REDIRECT
#!define WITH_AUTH
#!define WITH_IPAUTH
#!define WITH_ANTIFLOOD //对IP限制频次
#!define WITH_MULTIDOMAIN
#!define WITH_DISPATCH //dispatch
#!endif

//#!define WITH_ALIASDB //使用数据中的域名


//#!define WITH_REDIRECT //3XX重定向 

#!ifdef WITH_SIP_SS
#!define WITH_PATH
#!define WITH_MULTIDOMAIN
#!define WITH_DISPATCH //dispatch
#!define WITH_AUTH
#!define WITH_IPAUTH
#!define WITH_REGISTRATION
#!define WITH_PRESENCE
#!define WITH_ACCDB
#!endif

#!ifndef DBURL
#!define DBURL "mysql://kamailio:kamailiorw@10.0.2.49:13306/kamailio"
#!endif

#!ifndef SIPUSERDBURL
#!define SIPUSERDBURL "mysql://root:unitcc@10.0.2.49:13306/cc"
#!endif

server_signature=no
use_dst_blacklist=on
tcp_accept_aliases=no
tcp_max_connections=8192

####### Include Local Config If Exists #########
import_file "kamailio-local.cfg"

####### Defined Values #########

# *** Value defines - IDs used later in config
#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5

#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=3
log_stderror=no
#!else
debug=2
log_stderror=no
#!endif

fork=yes
memdbg=5
memlog=5

log_facility=LOG_LOCAL0
log_prefix="{$mt $hdr(CSeq) $ci} "

/* number of SIP routing processes for each UDP socket
 * - value inherited by tcp_children and sctp_children when not set explicitely */
children=8

/* uncomment the next line to disable TCP (default on) */
# disable_tcp=yes

/* number of SIP routing processes for all TCP/TLS sockets */
# tcp_children=8

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse DNS on IPs (default on) */
auto_aliases=no

/* add local domain aliases */
# alias="sip.mydomain.com"


#!ifdef WITH_TLS
enable_tls=yes

/* upper limit for TLS connections */
tls_max_connections=2048
#!endif

####### Custom Parameters #########

/* These parameters can be modified runtime via RPC interface
 * - see the documentation of 'cfg_rpc' module.
 *
 * Format: group.id = value 'desc' description
 * Access: $sel(cfg_get.group.id) or @cfg_get.group.id */


####### Modules Section ########

/* set paths to location of modules */
# mpath="/usr/local/lib/kamailio/modules/"

#!ifdef WITH_MYSQL
loadmodule "db_mysql.so"
#!endif

loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "uac_redirect.so"

#!ifdef WITH_PATH
loadmodule "path.so"
#!endif

#!ifdef WITH_REGISTRATION
loadmodule "registrar.so"
#!endif

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!endif

#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif


#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
loadmodule "presence_xml.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_XMLRPC
loadmodule "xmlrpc.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

loadmodule "dispatcher.so"


# ----------------- setting module-specific parameters ---------------


# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
# modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
# modparam("jsonrpcs", "dgram_socket", "/var/run/kamailio/kamailio_rpc.sock")

# ----- ctl params -----
/* set the path to RPC unix socket control file */
# modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 0)
# do not append from tag to the RR (no need for this script)
modparam("rr", "append_fromtag", 0)

#------sip redirect-------
modparam("uac_redirect","bflags", 1)

#!ifdef WITH_REGISTRATION
# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
# modparam("registrar", "max_contacts", 10)
/* max value for expires of registrations */
modparam("registrar", "max_expires", 3600)
/* set it to 1 to enable GRUU */
modparam("registrar", "gruu_enabled", 0)
modparam("registrar", "received_avp", "$avp(RECEIVED)")

#!ifdef WITH_PATH
modparam("registrar", "use_path", 1)
modparam("registrar", "path_mode", 1)
modparam("registrar", "path_use_received", 0)
#!endif

#!endif

#!ifdef WITH_PATH
modparam("path", "use_received", 0) 
#!endif

# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
 * if you enable this parameter, be sure the enable "append_fromtag"
 * in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif

# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 3)
modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif

# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", SIPUSERDBURL)
modparam("auth_db", "version_table", 0)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "user_column", "sip_id")
modparam("auth_db", "password_column", "sip_password")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#!endif

#!endif

# ----- alias_db params -----
#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif


# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
/* register callback to match myself condition with domains list */
modparam("domain", "register_myself", 1)
#!endif

#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)

# ----- presence_xml params -----
modparam("presence_xml", "db_url", DBURL)
modparam("presence_xml", "force_active", 1)
#!endif

#!ifdef WITH_NAT
# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@lingban.com")

# params needed for NAT traversal in other modules
modparam("nathelper", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "config", "/usr/local/etc/kamailio/tls.cfg")
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
/* ip ban htable with autoexpire after 5 minutes */
modparam("htable", "htable", "ipban=>size=8000;autoexpire=300;")
modparam("htable", "htable", "nonce=>size=8000;autoexpire=10;")
#!endif

#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")
#!endif

#!ifdef WITH_DEBUG
# ----- debugger params -----
modparam("debugger", "cfgtrace", 0)
modparam("debugger", "log_level_name", "exec")
#!endif

#-------dispather params-----
modparam("dispatcher", "db_url", DBURL)
modparam("dispatcher", "table_name", "dispatcher")
modparam("dispatcher", "setid_col", "setid")
modparam("dispatcher", "destination_col", "destination")
modparam("dispatcher", "flags_col", "flags")
modparam("dispatcher", "priority_col", "priority")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "ds_ping_from", "sip:pinger@lingban.cn")
modparam("dispatcher", "ds_ping_interval", 30)
modparam("dispatcher", "ds_probing_threshold", 1)
modparam("dispatcher", "ds_inactive_threshold", 1)
modparam("dispatcher", "ds_ping_reply_codes", "class=2;code=403;code=488;class=3")
modparam("dispatcher", "ds_probing_mode", 2)

####### Routing Logic ########

# 请求入口函数 request_route
# 响应入口函数 reply_route

/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {
	xlog("L_INFO", "收到请求 request_route\n");
	xlog("L_INFO", "收到请求 SIP $rm from: $fu to: $ru - srcip: $si\n");
	
	# per request initial checks
	# 对SIP 请求进行合法性和防攻击检查
	route(REQINIT);

	if(is_method("OPTIONS") && $rU==$null) {
		xlog("L_INFO", "处理OPTIONS请求\n");
		options_reply();
		exit;
	}

	# NAT detection
	# 检测NAT
	route(NATDETECT);

	# CANCEL processing
	# 处理CANCEL
	if (is_method("CANCEL")) {
		xlog("L_INFO", "处理CANCEL请求\n");
		if (t_check_trans()) {
			if (!t_relay()) {
				sl_reply_error();
			}
		}
		else{
			sl_send_reply("481","Not here");
		}
		exit;
	}

	# handle retransmissions
	# 处理非ACK的重发
	if (!is_method("ACK")) {
		# xlog("L_INFO", "非ACK请求\n");
		if(t_precheck_trans()) {
			xlog("L_INFO", "请求被其他进程处理\n");
			exit;
		}
	}

	# handle requests within SIP dialogs
	# 处理对话内请求
	route(WITHINDLG);

	### only initial requests (no To tag)
	### 以下是新的请求（没有 To tag)
	
	# 只处理负责的domain,IP白名单和内部请求，其他不处理
	if (!is_from_local() && !allow_source_address() && !ds_is_from_list()) {
		exit;
	}


#!ifdef WITH_AUTH
	# authentication
#!ifndef WITH_SIP_REDIRECT
	route(AUTH);
#!endif
#!endif

#!ifndef WITH_SIP_REDIRECT
	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("REGISTER|INVITE|SUBSCRIBE|OPTIONS")) {
		record_route();
	}

	# account only INVITEs
	if (is_method("INVITE")) {
		setflag(FLT_ACC); # do accounting
	}
#!endif

#!ifdef WITH_PRESENCE
	# handle presence related requests
	route(PRESENCE);
#!endif

	# handle registrations
	# 处理注册请求
	route(REGISTRAR);

#!ifdef WITH_SIP_SS
	# user location service
	if(is_present_hf("X-MS")){
		route(LOCATION);
		exit;
	}
#!endif

	#负载均衡分发
	route(DISPATCH);

}

# Wrapper for relaying requests
route[RELAY] {
	xlog("L_INFO", "发送请求到:$du route[RELAY]\n");
	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|REGISTER|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE|REGISTER|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	#防止外部消息添加了 X-MS头
	if(!ds_is_from_list()){
		remove_hf("X-MS");
		#如果不是IP白名单，移除X-GW头
		if(allow_source_address()){
			append_hf("X-GW");
		}else{
			remove_hf("X-GW");
		}
	}
	
	if (!t_relay()) {
		xlog("L_ERR", "发送请求到:$du失败\n");
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
# 对SIP 请求进行合法性和防攻击检测
route[REQINIT] {
	#xlog("L_INFO", "检查请求的合法性 route[REQINIT]\n");
#!ifdef WITH_ANTIFLOOD
	# 防攻击检测
	# flood detection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xlog("L_INFO", "请求超频次，request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","pike 被阻塞 ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif
	if($ua =~ "friendly-scanner|sipcli|VaxSIPUserAgent") {
		# silent drop for scanners - uncomment next line if want to reply
		xlog("L_INFO", "扫描请求，放弃\n");
		# sl_send_reply("200", "OK");
		exit;
	}

# 检测是否经过了太多跳
	if (!mf_process_maxfwd_header("10")) {
		xlog("L_ERR", "经过了太多跳\n");
		sl_send_reply("483","Too Many Hops");
		exit;
	}

# SIP 信令完整性检测
	if(!sanity_check("17895", "7")) {
		xlog("信令不完整 Malformed SIP message from $si:$sp\n");
		exit;
	}
	xlog("L_INFO", "合法请求\n");
}

# Caller NAT detection
route[NATDETECT] {
#!ifdef WITH_NAT
	#xlog("L_INFO", "NAT检测route[NATDETECT]\n");
	if (nat_uac_test("19")) {
		xlog("L_INFO", "是NAT环境,强制添加rport参数\n");
		force_rport(); # 强制添加rport参数
		if (is_method("REGISTER")) {
			xlog("L_INFO", "修复注册信息\n");
			fix_nated_register();
		} else {
			if(is_first_hop()) {
				xlog("L_INFO", "设置Contact别名\n");
				set_contact_alias();
			}
		}
		setflag(FLT_NATS);
		return;
	}
	xlog("L_INFO", "不是NAT环境\n");
#!endif
	return;
}

# Handle requests within SIP dialogs
# 处理对话内请求
route[WITHINDLG] {
	if (!has_totag()) return; # 没有To tag，不是对话内请求
	xlog("L_INFO", "对话内请求 route[WITHINDLG]\n");

	# sequential request withing a dialog should
	# take the path determined by record-routing
	# 是否包含Route 集合
	if (loose_route()) {
		xlog("L_INFO", "使用Route路由\n");
		route(DLGURI);
		if (is_method("BYE")) {
			setflag(FLT_ACC); # 计费do accounting ...
			setflag(FLT_ACCFAILED); # 即使事务失败 ... even if the transaction fails
		} else if ( is_method("ACK") ) {
			# ACK is forwarded statelessly
			# ACK中也可以携带SDP，所以进行NAT修复
			route(NATMANAGE);
		} else if ( is_method("NOTIFY|INVITE") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}

	# 对话内订阅请求
#!ifdef WITH_PRESENCE
	if (is_method("SUBSCRIBE") && uri == myself) {
		# in-dialog subscribe requests
		route(PRESENCE);
		exit;
	}
#!endif
	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			xlog("L_INFO", "匹配到事务\n");
			route(RELAY);
			exit;
		} else {
			# 200 OK ACK without matching transaction ...
			# 200 OK ACK 没有匹配事务
			xlog("L_INFO", "没有匹配到事务,放弃\n");
			exit;
		}
	}
	sl_send_reply("404","Not here");
	exit;
}

# Handle SIP registrations
route[REGISTRAR] {
	if (!is_method("REGISTER")) return;
	xlog("L_INFO", "处理注册请求 route[REGISTER]\n");

#!ifdef WITH_SIP_SS
	if(isflagset(FLT_NATS)) {
		setbflag(FLB_NATB);
#!ifdef WITH_NATSIPPING
		# do SIP NAT pinging
		setbflag(FLB_NATSIPPING);
#!endif
	}
	xlog("L_INFO", "save(\"location\",\"0x04\")\n");
	if (!save("location","0x04")) {
		sl_reply_error();
	}
	exit;
#!endif

#!ifdef WITH_SIP_PROXY
	
	if (!add_path("proxy")){
		xlog("L_ERR", "添加Path头失败$ci|log|unable to add path\n");

		sl_send_reply("503","Internal Path Error");
		exit;
	}
	else{
		xlog("L_INFO", "添加Path头");
	}
	return;
#!endif
}

# User location service
route[LOCATION] {
	xlog("L_INFO", "呼叫本地号码 route[LOCATION]\n");
#!ifdef WITH_ALIASDB
	# search in DB-based aliases
	if(alias_db_lookup("dbaliases")) {
		route(SIPOUT);
	}
#!endif

#!ifdef WITH_REGISTRATION
	$avp(oexten) = $rU;
	if (!lookup("location")) {
		$var(rc) = $rc;
		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
				send_reply("404", "Not Found");
				exit;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}
#!endif
	# when routing via usrloc, log the missed calls also
	if (is_method("INVITE")) {
		setflag(FLT_ACCMISSED);
	}

	route(RELAY);
	exit;
}

# Presence server processing
route[PRESENCE] {
	if(!is_method("PUBLISH|SUBSCRIBE")) return;
	xlog("L_INFO", "route[PRESENCE]\n");
#!ifdef WITH_PRESENCE
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	if(is_method("PUBLISH")) {
		handle_publish();
		t_release();
	} else if(is_method("SUBSCRIBE")) {
		handle_subscribe();
		t_release();
	}
	exit;
#!endif

	# if presence enabled, this part will not be executed
	if (is_method("PUBLISH") || $rU==$null) {
		sl_send_reply("404", "Not here");
		exit;
	}
	return;
}

# IP authorization and user authentication
route[AUTH] {

	xlog("L_INFO", "认证 route[AUTH]\n");

#!ifdef WITH_IPAUTH
	if((!is_method("REGISTER")) && allow_source_address()) {
		# source IP allowed
		xlog("L_INFO", "IP白名单\n");
		return;
	}
#!endif

	if(is_present_hf("X-MS") || is_present_hf("X-GW")){
		xlog("L_INFO", "MS或者GW白名单\n");
		return;
	}
	
	if (is_method("REGISTER") || from_uri==myself) {
		# authenticate requests
		if (!www_authenticate("$fd", "sip_users")) {
			xlog("L_INFO", "proxy_challenge\n");
			www_challenge("$fd", "1");
			exit;
		}
		# user authenticated - remove auth header
		if(!is_method("REGISTER|PUBLISH"))
			consume_credentials();
	}

	return;
}

# RTPProxy control and signaling updates for NAT traversal
route[NATMANAGE] {
#!ifdef WITH_NAT
	xlog("L_INFO", "NAT修复route[NATMANAGE]\n");
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) return;

	/*if(nat_uac_test("8")) {
		xlog("L_INFO", "修改RTP IP\n");
		fix_nated_sdp("10");
	}*/
	
	/*if(nat_uac_test("1")){
		xlog("L_INFO", "修改Contact\n");
		fix_nated_contact();
	}*/

	if (is_request()) {
		if (!has_totag()) {
			# 非对话内请求
			xlog("L_INFO", "添加nat=yes\n");
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			if(is_first_hop()){
				xlog("L_INFO", "设置 Contact别名\n");
				set_contact_alias();
			}
		}
	}
#!endif
	return;
}

# URI update for dialog requests
route[DLGURI] {
#!ifdef WITH_NAT
	if(!isdsturiset()) {
		xlog("L_INFO", "重写RUI route[DLGURI]\n");
		handle_ruri_alias();
	}
#!endif
	return;
}

# Routing to foreign domains
route[SIPOUT] {
	# if (uri==myself) return;
	xlog("L_INFO", "route[SIPOUT]\n");
	append_hf("P-hint: outbound\r\n");
	remove_hf("X-MS");
	remove_hf("X-GW");
	route(RELAY);
	exit;
}

# XMLRPC routing
#!ifdef WITH_XMLRPC
route[XMLRPC] {
	xlog("L_INFO", "route[XMLRPC]\n");
	# allow XMLRPC from localhost
	if ((method=="POST" || method=="GET")
			&& (src_ip==127.0.0.1)) {
		# close connection only for xmlrpclib user agents (there is a bug in
		# xmlrpclib: it waits for EOF before interpreting the response).
		if ($hdr(User-Agent) =~ "xmlrpclib")
			set_reply_close();
		set_reply_no_connect();
		dispatch_rpc();
		exit;
	}
	send_reply("403", "Forbidden");
	exit;
}
#!endif

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xlog("L_INFO", "创建分支 new branch [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
}

reply_route {
	xlog("L_INFO", "收到响应：$T_reply_code reply_route\n");
	if(!t_check_trans()) {
		drop;
	}
}

onsend_route {
	xlog("L_INFO", "发送完成 onsend_route\n");
	return;
}
 
# Manage incoming replies
onreply_route[MANAGE_REPLY] {
	xlog("L_INFO", "处理响应：$T_reply_code  onreply_route[MANAGE_REPLY]\n");
	if(status=~"[12][0-9][0-9]") {
		route(NATMANAGE);
		return;
	}
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	xlog("L_INFO", "失败响应：$T_reply_code failure_route[MANAGE_FAILURE]\n");

	if (t_is_canceled()) exit;
	
	# block call redirect based on 3xx replies.
	# 处理3xx响应
	if (t_check_status("3[0-9][0-9]")) {
		get_redirects("3:1");
		xlog("L_INFO", "3XX重定向 ou:$ou ru:$ru\n");
		route(RELAY);
		exit;
	}
	
	if(t_check_status("401")){
		xlog("L_INFO", "401认证消息 ou:$ou ru:$ru du:$du ou:$ou\n");
		$sht(nonce=>$ci) = $du;
	}
	
	if (t_check_status("480|5[0-9][0-9]") or (t_branch_timeout() and !t_branch_replied())){
		ds_mark_dst("ip"); # 设置目标状态不可用,并开启OPTIONS 探测
		if(ds_next_dst()){
			xlog("L_INFO", "分发到下一个目标\n");
	        	route(RELAY);
			exit;
		}
		else{
			# 如果是re INIVTE请求失败，没有下一个dst，重新分发到可用的服务器，此功能需测试
			route(DISPATCH);
		}
	}
}

# Dispatch requests
route[DISPATCH] {
#!ifdef WITH_DISPATCH
	xlog("L_INFO", "分发请求 route[DISPATCH]\n");
	# round robin dispatching on gateways group '1'
	
#!ifdef WITH_SIP_PROXY
	# 如果是从内部服务器发出的请求
	if(ds_is_from_list()) {
		route(SIPOUT);
		exit;
	}
#!endif

#!ifdef WITH_SIP_GW
	# 如果是从内部服务器发出的请求
	if(ds_is_from_list()) {
		route(SIPOUT);
		exit;
	}
#!endif

	$var(disgroup) = DISPATCHGROUP;
#!ifdef WITH_SIP_REDIRECT
	# user location service
	if(is_present_hf("X-MS") && is_method("INVITE")){
		if(is_subscriber("$ru", "subscriber", "3")){
			xlog("L_INFO", "呼叫到本地号码\n");
		}
		else{
			$var(disgroup) = DISPATCH_GW_GROUP;
		}
	}
#!endif

	if($sht(nonce=>$ci) != $null){
		$du = $sht(nonce=>$ci);
		xlog("L_INFO", "发送到上一个服务器$du\n");
		sht_rm("nonce", $ci);
	}
	else if(!ds_select_dst($var(disgroup), "0"))
	{
		xlog("L_ERR", "找不到目标\n");
		send_reply("404", "No destination");
		exit;
	}
	xlog("L_INFO", "--- SCRIPT: going to <$ru> via <$du>\n");
	route(RELAY);
	exit;
#!endif
	return;
}


# Send to FreeSWITCH
route[FSRELAY] {
	//$du = "sip:" + $sel(cfg_get.freeswitch.bindip) + ":" + $sel(cfg_get.freeswitch.bindport);
	route(RELAY);
	exit;
}
